"""
    verify_chksums.py
    Compares two files generated by `batch_md5.sh`.

    Copyright (C) 2025  IcePanorama

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <https://www.gnu.org/licenses/>.
"""
import sys


# FIXME: create ChecksumDict class and use that instead
def init_chksum_dict(path: str) -> {str: str}:
    """
        Creates dictionary from checksum file located at `path`, where each key
        is the file path and each value is its md5 checksum value. For the time
        being, at least, the type of both of these is `str`, although there may
        be some better data type for the checksum itself.
        param:  path    path to some checksum file.
        return: checksum dictionary.
    """
    print(f"Creating chksum dictionary for file: {path}.")
    out = {}
    with open(path) as fptr:
        for line in fptr:
            if not line:
                continue

            segments = line.split("\t")
            if (len(segments) < 2):
                raise RuntimeError(f"Bad input: {line}")
            segments[1] = segments[1][:-1]
            if (segments[1] in out):
                raise RuntimeError(f"Duplicate key in {path}:"
                                   + f"{segments[1]} => {out[segments[1]]}")

            out[segments[1]] = segments[0]
    return out


if len(sys.argv) < 3:
    raise ValueError(f"Invalid usage error. Try: {sys.argv[0]} "
                     + "path_to_original.txt path_to_alt.txt`")

original = init_chksum_dict(sys.argv[1])
alt = init_chksum_dict(sys.argv[2])

print("Verifying checksums")
if (len(original.keys()) > len(alt.keys())):
    raise RuntimeError("Original checksum file has more keys than " +
                       f"alternate. Original: {len(original.keys())}, "
                       + f"alt: {len(alt.key())}")
for file in alt.keys():
    if (file not in original):
        print(f"Warning: file, {file}, not found in {sys.argv[1]}.")
    elif (original[file] != alt[file]):
        raise RuntimeError(f"Chksum mismatch for {file} (original: "
                           + f"{original[file]}, new: {alt[file]}).")

print("All checksums match... exiting.")
