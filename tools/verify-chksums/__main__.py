"""
    verify_chksums.py
    Compares two files generated by `batch_md5.sh`.
"""
import sys


def init_chksum_dict(path: str) -> {str: str}:
    """
        Creates dictionary from checksum file located at `path`, where each key
        is the file path and each value is its md5 checksum value. For the time
        being, at least, the type of both of these is `str`, although there may
        be some better data type for the checksum itself.
        param:  path    path to some checksum file.
        return: checksum dictionary.
    """
    print(f"Creating chksum dictionary for file: {path}.")
    out = {}
    with open(path) as fptr:
        for line in fptr:
            if not line:
                continue

            segments = line.split("  ")
            if (len(segments) < 2):
                raise RuntimeError(f"Bad input: {line}")
            segments[1] = segments[1][:-1]
            if (segments[1] in out):
                raise RuntimeError(f"Duplicate key in {path}:"
                                   + f"{segments[1]} => {out[segments[1]]}")

            out[segments[1]] = segments[0]
    return out


if len(sys.argv) < 3:
    raise ValueError(f"Invalid usage error. Try: {sys.argv[0]} "
                     + "path_to_original.txt path_to_alt.txt`")

original = init_chksum_dict(sys.argv[1])
alt = init_chksum_dict(sys.argv[2])

no_errs = True
print("Verifying checksums")
# FIXME: work around for files not extracted by old HH, revert to
# exceptions at some point in the future.
for file in alt.keys():
    if (file not in original):
        print(f"Error: file, {file}, not in {sys.argv[1]}.")
        no_errs = False
        continue
    if (original[file] != alt[file]):
        raise RuntimeError(f"Chksum mismatch for {file}: original was "
                           + f"{original[file]}, new is {alt[file]}.")
if no_errs:
    print("All checksums match... exiting.")
