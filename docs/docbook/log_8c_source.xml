<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_log_8c_source" xml:lang="en-US">
<title>log.c</title>
<indexterm><primary>src/log.c</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered"><anchor xml:id="_log_8c_source_1l00001"/>00001 <emphasis role="comment">//&#32;&#32;Copyright&#32;(C)&#32;2024&#32;&#32;IcePanorama</emphasis>
<anchor xml:id="_log_8c_source_1l00002"/>00002 <emphasis role="comment">//&#32;&#32;This&#32;file&#32;is&#32;a&#32;part&#32;of&#32;HarvesterHarvester.</emphasis>
<anchor xml:id="_log_8c_source_1l00003"/>00003 <emphasis role="comment">//&#32;&#32;HarvesterHarvester&#32;is&#32;free&#32;software:&#32;you&#32;can&#32;redistribute&#32;it&#32;and/or&#32;modify</emphasis>
<anchor xml:id="_log_8c_source_1l00004"/>00004 <emphasis role="comment">//&#32;&#32;it&#32;under&#32;the&#32;terms&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;as&#32;published&#32;by&#32;the</emphasis>
<anchor xml:id="_log_8c_source_1l00005"/>00005 <emphasis role="comment">//&#32;&#32;Free&#32;Software&#32;Foundation,&#32;either&#32;version&#32;3&#32;of&#32;the&#32;License,&#32;or&#32;(at&#32;your</emphasis>
<anchor xml:id="_log_8c_source_1l00006"/>00006 <emphasis role="comment">//&#32;&#32;option)&#32;any&#32;later&#32;version.</emphasis>
<anchor xml:id="_log_8c_source_1l00007"/>00007 <emphasis role="comment">//&#32;&#32;This&#32;program&#32;is&#32;distributed&#32;in&#32;the&#32;hope&#32;that&#32;it&#32;will&#32;be&#32;useful,&#32;but&#32;WITHOUT</emphasis>
<anchor xml:id="_log_8c_source_1l00008"/>00008 <emphasis role="comment">//&#32;&#32;ANY&#32;WARRANTY;&#32;without&#32;even&#32;the&#32;implied&#32;warranty&#32;of&#32;MERCHANTABILITY&#32;or</emphasis>
<anchor xml:id="_log_8c_source_1l00009"/>00009 <emphasis role="comment">//&#32;&#32;FITNESS&#32;FOR&#32;A&#32;PARTICULAR&#32;PURPOSE.&#32;&#32;See&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;for</emphasis>
<anchor xml:id="_log_8c_source_1l00010"/>00010 <emphasis role="comment">//&#32;&#32;more&#32;details.</emphasis>
<anchor xml:id="_log_8c_source_1l00011"/>00011 <emphasis role="comment">//</emphasis>
<anchor xml:id="_log_8c_source_1l00012"/>00012 <emphasis role="comment">//&#32;&#32;You&#32;should&#32;have&#32;received&#32;a&#32;copy&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;along</emphasis>
<anchor xml:id="_log_8c_source_1l00013"/>00013 <emphasis role="comment">//&#32;&#32;with&#32;this&#32;program.&#32;&#32;If&#32;not,&#32;see&#32;&lt;https://www.gnu.org/licenses/&gt;.</emphasis>
<anchor xml:id="_log_8c_source_1l00014"/>00014 <emphasis role="preprocessor">#include&#32;&quot;log.h&quot;</emphasis>
<anchor xml:id="_log_8c_source_1l00015"/>00015 <emphasis role="preprocessor">#include&#32;&quot;errors.h&quot;</emphasis>
<anchor xml:id="_log_8c_source_1l00016"/>00016 
<anchor xml:id="_log_8c_source_1l00017"/>00017 <emphasis role="preprocessor">#include&#32;&lt;stdarg.h&gt;</emphasis>
<anchor xml:id="_log_8c_source_1l00018"/>00018 <emphasis role="preprocessor">#include&#32;&lt;stdio.h&gt;</emphasis>
<anchor xml:id="_log_8c_source_1l00019"/>00019 
<anchor xml:id="_log_8c_source_1l00028"/>00028 <emphasis role="keywordtype">void</emphasis>
<anchor xml:id="_log_8c_source_1l00029"/><link linkend="_log_8c_1aaaf9265dd175725985b56eeac3db2f30">00029</link> <link linkend="_log_8c_1aaaf9265dd175725985b56eeac3db2f30">print_hex_data</link>&#32;(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*buffer,&#32;<emphasis role="keyword">const</emphasis>&#32;uint8_t&#32;BUFFER_LEN)
<anchor xml:id="_log_8c_source_1l00030"/>00030 {
<anchor xml:id="_log_8c_source_1l00031"/>00031 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(uint8_t&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;BUFFER_LEN;&#32;i++)
<anchor xml:id="_log_8c_source_1l00032"/>00032 &#32;&#32;&#32;&#32;{
<anchor xml:id="_log_8c_source_1l00033"/>00033 &#32;&#32;&#32;&#32;&#32;&#32;printf&#32;(<emphasis role="stringliteral">&quot;&#32;%02x&quot;</emphasis>,&#32;buffer[i]);
<anchor xml:id="_log_8c_source_1l00034"/>00034 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;((i&#32;!=&#32;0)&#32;&amp;&amp;&#32;(i&#32;%&#32;4&#32;==&#32;3))
<anchor xml:id="_log_8c_source_1l00035"/>00035 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="_log_8c_source_1l00036"/>00036 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;printf&#32;(<emphasis role="stringliteral">&quot;\t&quot;</emphasis>);
<anchor xml:id="_log_8c_source_1l00037"/>00037 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_log_8c_source_1l00038"/>00038 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;((i&#32;!=&#32;0)&#32;&amp;&amp;&#32;(i&#32;%&#32;16&#32;==&#32;15))
<anchor xml:id="_log_8c_source_1l00039"/>00039 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="_log_8c_source_1l00040"/>00040 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;puts&#32;(<emphasis role="stringliteral">&quot;&quot;</emphasis>);
<anchor xml:id="_log_8c_source_1l00041"/>00041 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_log_8c_source_1l00042"/>00042 &#32;&#32;&#32;&#32;}
<anchor xml:id="_log_8c_source_1l00043"/>00043 &#32;&#32;puts&#32;(<emphasis role="stringliteral">&quot;&quot;</emphasis>);
<anchor xml:id="_log_8c_source_1l00044"/>00044 }
<anchor xml:id="_log_8c_source_1l00045"/>00045 
<anchor xml:id="_log_8c_source_1l00046"/><link linkend="_log_8c_1a41e9ced92689f94ffc427d5e2e658382">00046</link> <emphasis role="preprocessor">#define&#32;BYTES_TO_READ&#32;32</emphasis>
<anchor xml:id="_log_8c_source_1l00052"/>00052 <emphasis role="keywordtype">void</emphasis>
<anchor xml:id="_log_8c_source_1l00053"/><link linkend="_log_8c_1af9859f7b27d46f040c836ecfdc1ac304">00053</link> <link linkend="_log_8c_1af9859f7b27d46f040c836ecfdc1ac304">print_some_data_from_file</link>&#32;(FILE&#32;*fptr)
<anchor xml:id="_log_8c_source_1l00054"/>00054 {
<anchor xml:id="_log_8c_source_1l00055"/>00055 &#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;buffer[<link linkend="_log_8c_1a41e9ced92689f94ffc427d5e2e658382">BYTES_TO_READ</link>];
<anchor xml:id="_log_8c_source_1l00056"/>00056 &#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;bytes_read&#32;=&#32;fread&#32;(buffer,&#32;<emphasis role="keyword">sizeof</emphasis>&#32;(buffer[0]),&#32;<link linkend="_log_8c_1a41e9ced92689f94ffc427d5e2e658382">BYTES_TO_READ</link>,&#32;fptr);
<anchor xml:id="_log_8c_source_1l00057"/>00057 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(bytes_read&#32;!=&#32;<link linkend="_log_8c_1a41e9ced92689f94ffc427d5e2e658382">BYTES_TO_READ</link>)
<anchor xml:id="_log_8c_source_1l00058"/>00058 &#32;&#32;&#32;&#32;{
<anchor xml:id="_log_8c_source_1l00059"/>00059 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_errors_8c_1a2628891f509e5466f8a7c932a72bd2dc">handle_fread_error</link>&#32;(bytes_read,&#32;<link linkend="_log_8c_1a41e9ced92689f94ffc427d5e2e658382">BYTES_TO_READ</link>);
<anchor xml:id="_log_8c_source_1l00060"/>00060 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
<anchor xml:id="_log_8c_source_1l00061"/>00061 &#32;&#32;&#32;&#32;}
<anchor xml:id="_log_8c_source_1l00062"/>00062 
<anchor xml:id="_log_8c_source_1l00063"/>00063 &#32;&#32;<link linkend="_log_8c_1aaaf9265dd175725985b56eeac3db2f30">print_hex_data</link>&#32;(buffer,&#32;<link linkend="_log_8c_1a41e9ced92689f94ffc427d5e2e658382">BYTES_TO_READ</link>);
<anchor xml:id="_log_8c_source_1l00064"/>00064 &#32;&#32;fseek&#32;(fptr,&#32;-<link linkend="_log_8c_1a41e9ced92689f94ffc427d5e2e658382">BYTES_TO_READ</link>,&#32;SEEK_CUR);
<anchor xml:id="_log_8c_source_1l00065"/>00065 }
<anchor xml:id="_log_8c_source_1l00066"/>00066 
<anchor xml:id="_log_8c_source_1l00067"/>00067 <emphasis role="comment">//&#32;TODO:&#32;add&#32;an&#32;command-line&#32;arg&#32;to&#32;output&#32;to&#32;a&#32;log&#32;file&#32;or&#32;to&#32;run&#32;silently.</emphasis>
<anchor xml:id="_log_8c_source_1l00068"/>00068 <emphasis role="keywordtype">void</emphasis>
<anchor xml:id="_log_8c_source_1l00069"/><link linkend="_log_8c_1a17a149a589296f67b4ecee3493403542">00069</link> <link linkend="_log_8c_1a17a149a589296f67b4ecee3493403542">hh_log</link>&#32;(hh_log_level&#32;lvl,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*fmt,&#32;...)
<anchor xml:id="_log_8c_source_1l00070"/>00070 {
<anchor xml:id="_log_8c_source_1l00071"/>00071 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*program_tag&#32;=&#32;<emphasis role="stringliteral">&quot;[HarvesterHarvester]&quot;</emphasis>;
<anchor xml:id="_log_8c_source_1l00072"/>00072 &#32;&#32;FILE&#32;*output_stream&#32;=&#32;stdout;
<anchor xml:id="_log_8c_source_1l00073"/>00073 
<anchor xml:id="_log_8c_source_1l00074"/>00074 &#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(lvl)
<anchor xml:id="_log_8c_source_1l00075"/>00075 &#32;&#32;&#32;&#32;{
<anchor xml:id="_log_8c_source_1l00076"/>00076 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;HH_LOG_INFO:
<anchor xml:id="_log_8c_source_1l00077"/>00077 &#32;&#32;&#32;&#32;&#32;&#32;fprintf&#32;(stdout,&#32;<emphasis role="stringliteral">&quot;%s[INFO]&#32;&quot;</emphasis>,&#32;program_tag);
<anchor xml:id="_log_8c_source_1l00078"/>00078 &#32;&#32;&#32;&#32;&#32;&#32;output_stream&#32;=&#32;stdout;
<anchor xml:id="_log_8c_source_1l00079"/>00079 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="_log_8c_source_1l00080"/>00080 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;HH_LOG_WARNING:
<anchor xml:id="_log_8c_source_1l00081"/>00081 &#32;&#32;&#32;&#32;&#32;&#32;fprintf&#32;(stderr,&#32;<emphasis role="stringliteral">&quot;%s[WARNING]&#32;&quot;</emphasis>,&#32;program_tag);
<anchor xml:id="_log_8c_source_1l00082"/>00082 &#32;&#32;&#32;&#32;&#32;&#32;output_stream&#32;=&#32;stderr;
<anchor xml:id="_log_8c_source_1l00083"/>00083 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="_log_8c_source_1l00084"/>00084 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;HH_LOG_ERROR:
<anchor xml:id="_log_8c_source_1l00085"/>00085 &#32;&#32;&#32;&#32;&#32;&#32;fprintf&#32;(stderr,&#32;<emphasis role="stringliteral">&quot;%s[ERROR]&#32;&quot;</emphasis>,&#32;program_tag);
<anchor xml:id="_log_8c_source_1l00086"/>00086 &#32;&#32;&#32;&#32;&#32;&#32;output_stream&#32;=&#32;stderr;
<anchor xml:id="_log_8c_source_1l00087"/>00087 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="_log_8c_source_1l00088"/>00088 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:
<anchor xml:id="_log_8c_source_1l00089"/>00089 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_log_8c_1a17a149a589296f67b4ecee3493403542">hh_log</link>&#32;(HH_LOG_ERROR,&#32;<emphasis role="stringliteral">&quot;Unrecognized&#32;hh_log_level,&#32;%d&quot;</emphasis>,&#32;lvl);
<anchor xml:id="_log_8c_source_1l00090"/>00090 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
<anchor xml:id="_log_8c_source_1l00091"/>00091 &#32;&#32;&#32;&#32;}
<anchor xml:id="_log_8c_source_1l00092"/>00092 
<anchor xml:id="_log_8c_source_1l00093"/>00093 &#32;&#32;va_list&#32;args;
<anchor xml:id="_log_8c_source_1l00094"/>00094 &#32;&#32;va_start&#32;(args,&#32;fmt);
<anchor xml:id="_log_8c_source_1l00095"/>00095 &#32;&#32;vfprintf&#32;(output_stream,&#32;fmt,&#32;args);
<anchor xml:id="_log_8c_source_1l00096"/>00096 &#32;&#32;va_end&#32;(args);
<anchor xml:id="_log_8c_source_1l00097"/>00097 &#32;&#32;fprintf&#32;(output_stream,&#32;<emphasis role="stringliteral">&quot;\n&quot;</emphasis>);
<anchor xml:id="_log_8c_source_1l00098"/>00098 }
</programlisting></section>
