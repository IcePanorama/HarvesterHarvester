<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_utils_8c" xml:lang="en-US">
<title>src/utils.c File Reference</title>
<indexterm><primary>src/utils.c</primary></indexterm>
<programlisting linenumbering="unnumbered">#include &quot;utils.h&quot;<?linebreak?>#include &quot;data_reader.h&quot;<?linebreak?>#include &quot;errors.h&quot;<?linebreak?>#include &quot;log.h&quot;<?linebreak?>#include &quot;options.h&quot;<?linebreak?>#include &lt;stdio.h&gt;<?linebreak?>#include &lt;stdlib.h&gt;<?linebreak?>#include &lt;string.h&gt;<?linebreak?>#include &lt;sys/stat.h&gt;<?linebreak?>#include &lt;unistd.h&gt;<?linebreak?></programlisting><simplesect>
    <title>Functions    </title>
        <itemizedlist>
            <listitem><para>int8_t <link linkend="_utils_8c_1a41ffa7a16724ed0473f420933cfb7b87">prepend_path_string</link> (char *str, const char *prefix)</para>
</listitem>
            <listitem><para>void <link linkend="_utils_8c_1a7f5f49b4dabd84b37e8f7b9464e57992">prepend_string</link> (char *str, const char *prefix)</para>
</listitem>
            <listitem><para>bool <link linkend="_utils_8c_1aee9f9bd7844e8e7d21d0965980b6e9ed">is_string_dat_file</link> (char *str)</para>
</listitem>
            <listitem><para>bool <link linkend="_utils_8c_1a28cf3fb6f4d89ea760afeca3f07a377b">directory_exists</link> (const char *dir)</para>
</listitem>
            <listitem><para>bool <link linkend="_utils_8c_1a0038df898c35b6a483fa874b3671735b">file_exists</link> (const char *filename)</para>
</listitem>
            <listitem><para>bool <link linkend="_utils_8c_1a4ce51b557efd36a5220e51669c79cc86">peek_char_is</link> (FILE *fptr, uint8_t expected_ch)</para>

<para>On error, returns false. </para>
</listitem>
            <listitem><para>bool <link linkend="_utils_8c_1ad89ab9462dec77ec0a6c4f32f731f7ff">peek_eof</link> (FILE *fptr)</para>

<para>This is sort of a hacky solution. </para>
</listitem>
            <listitem><para>uint16_t <link linkend="_utils_8c_1a4965520bde2fd7164397a78f8026164a">change_endianness_uint16</link> (uint16_t value)</para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Function Documentation</title>
<anchor xml:id="_utils_8c_1a4965520bde2fd7164397a78f8026164a"/><section>
    <title>change_endianness_uint16()</title>
<indexterm><primary>change_endianness_uint16</primary><secondary>utils.c</secondary></indexterm>
<indexterm><primary>utils.c</primary><secondary>change_endianness_uint16</secondary></indexterm>
<para><computeroutput>uint16_t change_endianness_uint16 (uint16_t value)</computeroutput></para><para>
Definition at line <link linkend="_utils_8c_source_1l00144">144</link> of file <link linkend="_utils_8c_source">utils.c</link>.</para>
</section>
<anchor xml:id="_utils_8c_1a28cf3fb6f4d89ea760afeca3f07a377b"/><section>
    <title>directory_exists()</title>
<indexterm><primary>directory_exists</primary><secondary>utils.c</secondary></indexterm>
<indexterm><primary>utils.c</primary><secondary>directory_exists</secondary></indexterm>
<para><computeroutput>bool directory_exists (const char * dir)</computeroutput></para><para>
Definition at line <link linkend="_utils_8c_source_1l00092">92</link> of file <link linkend="_utils_8c_source">utils.c</link>.</para>
</section>
<anchor xml:id="_utils_8c_1a0038df898c35b6a483fa874b3671735b"/><section>
    <title>file_exists()</title>
<indexterm><primary>file_exists</primary><secondary>utils.c</secondary></indexterm>
<indexterm><primary>utils.c</primary><secondary>file_exists</secondary></indexterm>
<para><computeroutput>bool file_exists (const char * filename)</computeroutput></para><para>
Definition at line <link linkend="_utils_8c_source_1l00104">104</link> of file <link linkend="_utils_8c_source">utils.c</link>.</para>
</section>
<anchor xml:id="_utils_8c_1aee9f9bd7844e8e7d21d0965980b6e9ed"/><section>
    <title>is_string_dat_file()</title>
<indexterm><primary>is_string_dat_file</primary><secondary>utils.c</secondary></indexterm>
<indexterm><primary>utils.c</primary><secondary>is_string_dat_file</secondary></indexterm>
<para><computeroutput>bool is_string_dat_file (char * str)</computeroutput></para><para>
Definition at line <link linkend="_utils_8c_source_1l00081">81</link> of file <link linkend="_utils_8c_source">utils.c</link>.</para>
</section>
<anchor xml:id="_utils_8c_1a4ce51b557efd36a5220e51669c79cc86"/><section>
    <title>peek_char_is()</title>
<indexterm><primary>peek_char_is</primary><secondary>utils.c</secondary></indexterm>
<indexterm><primary>utils.c</primary><secondary>peek_char_is</secondary></indexterm>
<para><computeroutput>bool peek_char_is (FILE * fptr, uint8_t expected_ch)</computeroutput></para><para>

<para>On error, returns false. </para>
</para>
<para>
Definition at line <link linkend="_utils_8c_source_1l00117">117</link> of file <link linkend="_utils_8c_source">utils.c</link>.</para>
</section>
<anchor xml:id="_utils_8c_1ad89ab9462dec77ec0a6c4f32f731f7ff"/><section>
    <title>peek_eof()</title>
<indexterm><primary>peek_eof</primary><secondary>utils.c</secondary></indexterm>
<indexterm><primary>utils.c</primary><secondary>peek_eof</secondary></indexterm>
<para><computeroutput>bool peek_eof (FILE * fptr)</computeroutput></para><para>

<para>This is sort of a hacky solution. </para>
</para>

<para>TODO: implement better err handling. </para>
<para>
Definition at line <link linkend="_utils_8c_source_1l00135">135</link> of file <link linkend="_utils_8c_source">utils.c</link>.</para>
</section>
<anchor xml:id="_utils_8c_1a41ffa7a16724ed0473f420933cfb7b87"/><section>
    <title>prepend_path_string()</title>
<indexterm><primary>prepend_path_string</primary><secondary>utils.c</secondary></indexterm>
<indexterm><primary>utils.c</primary><secondary>prepend_path_string</secondary></indexterm>
<para><computeroutput>int8_t prepend_path_string (char * str, const char * prefix)</computeroutput></para><para>
Definition at line <link linkend="_utils_8c_source_1l00033">33</link> of file <link linkend="_utils_8c_source">utils.c</link>.</para>
</section>
<anchor xml:id="_utils_8c_1a7f5f49b4dabd84b37e8f7b9464e57992"/><section>
    <title>prepend_string()</title>
<indexterm><primary>prepend_string</primary><secondary>utils.c</secondary></indexterm>
<indexterm><primary>utils.c</primary><secondary>prepend_string</secondary></indexterm>
<para><computeroutput>void prepend_string (char * str, const char * prefix)</computeroutput></para><para>
Definition at line <link linkend="_utils_8c_source_1l00059">59</link> of file <link linkend="_utils_8c_source">utils.c</link>.</para>
</section>
</section>
</section>
