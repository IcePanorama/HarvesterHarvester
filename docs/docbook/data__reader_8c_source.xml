<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_data__reader_8c_source" xml:lang="en-US">
<title>data_reader.c</title>
<indexterm><primary>src/data_reader.c</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered"><anchor xml:id="_data__reader_8c_source_1l00001"/>00001 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_data__reader_8h">data_reader.h</link>&quot;</emphasis>
<anchor xml:id="_data__reader_8c_source_1l00002"/>00002 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_errors_8h">errors.h</link>&quot;</emphasis>
<anchor xml:id="_data__reader_8c_source_1l00003"/>00003 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_file__flags_8h">file_flags.h</link>&quot;</emphasis>
<anchor xml:id="_data__reader_8c_source_1l00004"/>00004 
<anchor xml:id="_data__reader_8c_source_1l00005"/>00005 <emphasis role="preprocessor">#include&#32;&lt;stdbool.h&gt;</emphasis>
<anchor xml:id="_data__reader_8c_source_1l00006"/>00006 <emphasis role="preprocessor">#include&#32;&lt;stdint.h&gt;</emphasis>
<anchor xml:id="_data__reader_8c_source_1l00007"/>00007 
<anchor xml:id="_data__reader_8c_source_1l00008"/>00008 <emphasis role="keyword">static</emphasis>&#32;int8_t&#32;<link linkend="_data__reader_8c_1a9fe70ffc0216052a2ffededd4abded89">read_big_endian_data_uint32_t</link>&#32;(FILE&#32;*fptr,&#32;uint32_t&#32;*output);
<anchor xml:id="_data__reader_8c_source_1l00009"/>00009 <emphasis role="keyword">static</emphasis>&#32;int8_t&#32;<link linkend="_data__reader_8c_1ade23ba29f3b5a5c0c9b6dddb1b307df0">read_big_endian_data_uint16_t</link>&#32;(FILE&#32;*fptr,&#32;uint16_t&#32;*output);
<anchor xml:id="_data__reader_8c_source_1l00010"/>00010 
<anchor xml:id="_data__reader_8c_source_1l00011"/>00011 int8_t
<anchor xml:id="_data__reader_8c_source_1l00012"/><link linkend="_data__reader_8c_1a640713d2880309d518aebed5ebff89e0">00012</link> <link linkend="_data__reader_8c_1a640713d2880309d518aebed5ebff89e0">read_both_endian_data_uint32</link>&#32;(FILE&#32;*fptr,&#32;uint32_t&#32;*output)
<anchor xml:id="_data__reader_8c_source_1l00013"/>00013 {
<anchor xml:id="_data__reader_8c_source_1l00014"/>00014 &#32;&#32;uint32_t&#32;value;
<anchor xml:id="_data__reader_8c_source_1l00015"/>00015 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_data__reader_8c_1a35b8ba7297a3da1c6b2f847ca471299b">read_little_endian_data_uint32_t</link>&#32;(fptr,&#32;&amp;value)&#32;!=&#32;0)
<anchor xml:id="_data__reader_8c_source_1l00016"/>00016 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_errors_8h_1a7c84f993e326519edca8fd9efdec746ea0c1be935ae4f22ab2131ac82f875a6df">HH_FREAD_ERROR</link>;
<anchor xml:id="_data__reader_8c_source_1l00017"/>00017 
<anchor xml:id="_data__reader_8c_source_1l00018"/>00018 &#32;&#32;uint32_t&#32;expected_value;
<anchor xml:id="_data__reader_8c_source_1l00019"/>00019 &#32;&#32;<link linkend="_data__reader_8c_1a9fe70ffc0216052a2ffededd4abded89">read_big_endian_data_uint32_t</link>&#32;(fptr,&#32;&amp;expected_value);
<anchor xml:id="_data__reader_8c_source_1l00020"/>00020 
<anchor xml:id="_data__reader_8c_source_1l00021"/>00021 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(value&#32;!=&#32;expected_value)
<anchor xml:id="_data__reader_8c_source_1l00022"/>00022 &#32;&#32;&#32;&#32;{
<anchor xml:id="_data__reader_8c_source_1l00023"/>00023 &#32;&#32;&#32;&#32;&#32;&#32;printf&#32;(<emphasis role="stringliteral">&quot;ERROR:&#32;Incorrect&#32;endian&#32;conversion&#32;(uint32_t).\n\tExpected&#32;&quot;</emphasis>
<anchor xml:id="_data__reader_8c_source_1l00024"/>00024 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;%08X,&#32;got&#32;%08X.\n&quot;</emphasis>,
<anchor xml:id="_data__reader_8c_source_1l00025"/>00025 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;expected_value,&#32;value);
<anchor xml:id="_data__reader_8c_source_1l00026"/>00026 &#32;&#32;&#32;&#32;}
<anchor xml:id="_data__reader_8c_source_1l00027"/>00027 
<anchor xml:id="_data__reader_8c_source_1l00028"/>00028 &#32;&#32;*output&#32;=&#32;value;
<anchor xml:id="_data__reader_8c_source_1l00029"/>00029 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
<anchor xml:id="_data__reader_8c_source_1l00030"/>00030 }
<anchor xml:id="_data__reader_8c_source_1l00031"/>00031 
<anchor xml:id="_data__reader_8c_source_1l00032"/>00032 int8_t
<anchor xml:id="_data__reader_8c_source_1l00033"/><link linkend="_data__reader_8c_1ac5eb33b86992b7eec9d57407d8bb5bb4">00033</link> <link linkend="_data__reader_8c_1ac5eb33b86992b7eec9d57407d8bb5bb4">read_both_endian_data_uint16</link>&#32;(FILE&#32;*fptr,&#32;uint16_t&#32;*output)
<anchor xml:id="_data__reader_8c_source_1l00034"/>00034 {
<anchor xml:id="_data__reader_8c_source_1l00035"/>00035 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_data__reader_8c_1a78ed65e60aaa0c5e49f37c65baf761a4">read_little_endian_data_uint16_t</link>&#32;(fptr,&#32;output)&#32;!=&#32;0)
<anchor xml:id="_data__reader_8c_source_1l00036"/>00036 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_errors_8h_1a7c84f993e326519edca8fd9efdec746ea0c1be935ae4f22ab2131ac82f875a6df">HH_FREAD_ERROR</link>;
<anchor xml:id="_data__reader_8c_source_1l00037"/>00037 
<anchor xml:id="_data__reader_8c_source_1l00038"/>00038 &#32;&#32;uint16_t&#32;expected_value;
<anchor xml:id="_data__reader_8c_source_1l00039"/>00039 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_data__reader_8c_1ade23ba29f3b5a5c0c9b6dddb1b307df0">read_big_endian_data_uint16_t</link>&#32;(fptr,&#32;&amp;expected_value)&#32;!=&#32;0)
<anchor xml:id="_data__reader_8c_source_1l00040"/>00040 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_errors_8h_1a7c84f993e326519edca8fd9efdec746ea0c1be935ae4f22ab2131ac82f875a6df">HH_FREAD_ERROR</link>;
<anchor xml:id="_data__reader_8c_source_1l00041"/>00041 
<anchor xml:id="_data__reader_8c_source_1l00042"/>00042 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(*output&#32;!=&#32;expected_value)
<anchor xml:id="_data__reader_8c_source_1l00043"/>00043 &#32;&#32;&#32;&#32;{
<anchor xml:id="_data__reader_8c_source_1l00044"/>00044 &#32;&#32;&#32;&#32;&#32;&#32;printf&#32;(<emphasis role="stringliteral">&quot;ERROR:&#32;Incorrect&#32;endian&#32;conversion&#32;(uint16_t).\n\tExpected&#32;&quot;</emphasis>
<anchor xml:id="_data__reader_8c_source_1l00045"/>00045 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;%04X,&#32;got&#32;%04X.\n&quot;</emphasis>,
<anchor xml:id="_data__reader_8c_source_1l00046"/>00046 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;expected_value,&#32;*output);
<anchor xml:id="_data__reader_8c_source_1l00047"/>00047 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;-1;
<anchor xml:id="_data__reader_8c_source_1l00048"/>00048 &#32;&#32;&#32;&#32;}
<anchor xml:id="_data__reader_8c_source_1l00049"/>00049 
<anchor xml:id="_data__reader_8c_source_1l00050"/>00050 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
<anchor xml:id="_data__reader_8c_source_1l00051"/>00051 }
<anchor xml:id="_data__reader_8c_source_1l00052"/>00052 
<anchor xml:id="_data__reader_8c_source_1l00053"/>00053 int8_t
<anchor xml:id="_data__reader_8c_source_1l00054"/><link linkend="_data__reader_8c_1a35b8ba7297a3da1c6b2f847ca471299b">00054</link> <link linkend="_data__reader_8c_1a35b8ba7297a3da1c6b2f847ca471299b">read_little_endian_data_uint32_t</link>&#32;(FILE&#32;*fptr,&#32;uint32_t&#32;*output)
<anchor xml:id="_data__reader_8c_source_1l00055"/>00055 {
<anchor xml:id="_data__reader_8c_source_1l00056"/>00056 &#32;&#32;uint8_t&#32;bytes[4];
<anchor xml:id="_data__reader_8c_source_1l00057"/>00057 &#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;bytes_read&#32;=&#32;fread&#32;(bytes,&#32;<emphasis role="keyword">sizeof</emphasis>&#32;(uint8_t),&#32;4,&#32;fptr);
<anchor xml:id="_data__reader_8c_source_1l00058"/>00058 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(bytes_read&#32;!=&#32;4)
<anchor xml:id="_data__reader_8c_source_1l00059"/>00059 &#32;&#32;&#32;&#32;{
<anchor xml:id="_data__reader_8c_source_1l00060"/>00060 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_errors_8c_1a2628891f509e5466f8a7c932a72bd2dc">handle_fread_error</link>&#32;(bytes_read,&#32;<emphasis role="keyword">sizeof</emphasis>&#32;(bytes));
<anchor xml:id="_data__reader_8c_source_1l00061"/>00061 
<anchor xml:id="_data__reader_8c_source_1l00062"/>00062 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_errors_8h_1a7c84f993e326519edca8fd9efdec746ea0c1be935ae4f22ab2131ac82f875a6df">HH_FREAD_ERROR</link>;
<anchor xml:id="_data__reader_8c_source_1l00063"/>00063 &#32;&#32;&#32;&#32;}
<anchor xml:id="_data__reader_8c_source_1l00064"/>00064 
<anchor xml:id="_data__reader_8c_source_1l00065"/>00065 &#32;&#32;*output&#32;=&#32;((uint32_t)bytes[3]&#32;&lt;&lt;&#32;24)&#32;|&#32;((uint32_t)bytes[2]&#32;&lt;&lt;&#32;16)
<anchor xml:id="_data__reader_8c_source_1l00066"/>00066 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;((uint32_t)bytes[1]&#32;&lt;&lt;&#32;8)&#32;|&#32;(uint32_t)bytes[0];
<anchor xml:id="_data__reader_8c_source_1l00067"/>00067 
<anchor xml:id="_data__reader_8c_source_1l00068"/>00068 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
<anchor xml:id="_data__reader_8c_source_1l00069"/>00069 }
<anchor xml:id="_data__reader_8c_source_1l00070"/>00070 
<anchor xml:id="_data__reader_8c_source_1l00071"/>00071 int8_t
<anchor xml:id="_data__reader_8c_source_1l00072"/><link linkend="_data__reader_8c_1a9fe70ffc0216052a2ffededd4abded89">00072</link> <link linkend="_data__reader_8c_1a9fe70ffc0216052a2ffededd4abded89">read_big_endian_data_uint32_t</link>&#32;(FILE&#32;*fptr,&#32;uint32_t&#32;*output)
<anchor xml:id="_data__reader_8c_source_1l00073"/>00073 {
<anchor xml:id="_data__reader_8c_source_1l00074"/>00074 &#32;&#32;uint8_t&#32;bytes[4];
<anchor xml:id="_data__reader_8c_source_1l00075"/>00075 &#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;bytes_read&#32;=&#32;fread&#32;(bytes,&#32;<emphasis role="keyword">sizeof</emphasis>&#32;(uint8_t),&#32;4,&#32;fptr);
<anchor xml:id="_data__reader_8c_source_1l00076"/>00076 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(bytes_read&#32;!=&#32;4)
<anchor xml:id="_data__reader_8c_source_1l00077"/>00077 &#32;&#32;&#32;&#32;{
<anchor xml:id="_data__reader_8c_source_1l00078"/>00078 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_errors_8c_1a2628891f509e5466f8a7c932a72bd2dc">handle_fread_error</link>&#32;(bytes_read,&#32;<emphasis role="keyword">sizeof</emphasis>&#32;(bytes));
<anchor xml:id="_data__reader_8c_source_1l00079"/>00079 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_errors_8h_1a7c84f993e326519edca8fd9efdec746ea0c1be935ae4f22ab2131ac82f875a6df">HH_FREAD_ERROR</link>;
<anchor xml:id="_data__reader_8c_source_1l00080"/>00080 &#32;&#32;&#32;&#32;}
<anchor xml:id="_data__reader_8c_source_1l00081"/>00081 
<anchor xml:id="_data__reader_8c_source_1l00082"/>00082 &#32;&#32;*output&#32;=&#32;((uint32_t)bytes[0]&#32;&lt;&lt;&#32;24)&#32;|&#32;((uint32_t)bytes[1]&#32;&lt;&lt;&#32;16)
<anchor xml:id="_data__reader_8c_source_1l00083"/>00083 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;((uint32_t)bytes[2]&#32;&lt;&lt;&#32;8)&#32;|&#32;(uint32_t)bytes[3];
<anchor xml:id="_data__reader_8c_source_1l00084"/>00084 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
<anchor xml:id="_data__reader_8c_source_1l00085"/>00085 }
<anchor xml:id="_data__reader_8c_source_1l00086"/>00086 
<anchor xml:id="_data__reader_8c_source_1l00087"/>00087 int8_t
<anchor xml:id="_data__reader_8c_source_1l00088"/><link linkend="_data__reader_8c_1a78ed65e60aaa0c5e49f37c65baf761a4">00088</link> <link linkend="_data__reader_8c_1a78ed65e60aaa0c5e49f37c65baf761a4">read_little_endian_data_uint16_t</link>&#32;(FILE&#32;*fptr,&#32;uint16_t&#32;*output)
<anchor xml:id="_data__reader_8c_source_1l00089"/>00089 {
<anchor xml:id="_data__reader_8c_source_1l00090"/>00090 &#32;&#32;uint8_t&#32;bytes[2];
<anchor xml:id="_data__reader_8c_source_1l00091"/>00091 &#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;bytes_read&#32;=&#32;fread&#32;(bytes,&#32;<emphasis role="keyword">sizeof</emphasis>&#32;(uint8_t),&#32;2,&#32;fptr);
<anchor xml:id="_data__reader_8c_source_1l00092"/>00092 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(bytes_read&#32;!=&#32;2)
<anchor xml:id="_data__reader_8c_source_1l00093"/>00093 &#32;&#32;&#32;&#32;{
<anchor xml:id="_data__reader_8c_source_1l00094"/>00094 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_errors_8c_1a2628891f509e5466f8a7c932a72bd2dc">handle_fread_error</link>&#32;(bytes_read,&#32;<emphasis role="keyword">sizeof</emphasis>&#32;(bytes));
<anchor xml:id="_data__reader_8c_source_1l00095"/>00095 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_errors_8h_1a7c84f993e326519edca8fd9efdec746ea0c1be935ae4f22ab2131ac82f875a6df">HH_FREAD_ERROR</link>;
<anchor xml:id="_data__reader_8c_source_1l00096"/>00096 &#32;&#32;&#32;&#32;}
<anchor xml:id="_data__reader_8c_source_1l00097"/>00097 
<anchor xml:id="_data__reader_8c_source_1l00098"/>00098 &#32;&#32;*output&#32;=&#32;((uint16_t)bytes[0]&#32;&lt;&lt;&#32;8)&#32;|&#32;(uint16_t)bytes[1];
<anchor xml:id="_data__reader_8c_source_1l00099"/>00099 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
<anchor xml:id="_data__reader_8c_source_1l00100"/>00100 }
<anchor xml:id="_data__reader_8c_source_1l00101"/>00101 
<anchor xml:id="_data__reader_8c_source_1l00102"/>00102 int8_t
<anchor xml:id="_data__reader_8c_source_1l00103"/><link linkend="_data__reader_8c_1ade23ba29f3b5a5c0c9b6dddb1b307df0">00103</link> <link linkend="_data__reader_8c_1ade23ba29f3b5a5c0c9b6dddb1b307df0">read_big_endian_data_uint16_t</link>&#32;(FILE&#32;*fptr,&#32;uint16_t&#32;*output)
<anchor xml:id="_data__reader_8c_source_1l00104"/>00104 {
<anchor xml:id="_data__reader_8c_source_1l00105"/>00105 &#32;&#32;uint8_t&#32;bytes[2];
<anchor xml:id="_data__reader_8c_source_1l00106"/>00106 &#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;bytes_read&#32;=&#32;fread&#32;(bytes,&#32;<emphasis role="keyword">sizeof</emphasis>&#32;(uint8_t),&#32;2,&#32;fptr);
<anchor xml:id="_data__reader_8c_source_1l00107"/>00107 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(bytes_read&#32;!=&#32;2)
<anchor xml:id="_data__reader_8c_source_1l00108"/>00108 &#32;&#32;&#32;&#32;{
<anchor xml:id="_data__reader_8c_source_1l00109"/>00109 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_errors_8c_1a2628891f509e5466f8a7c932a72bd2dc">handle_fread_error</link>&#32;(bytes_read,&#32;<emphasis role="keyword">sizeof</emphasis>&#32;(bytes));
<anchor xml:id="_data__reader_8c_source_1l00110"/>00110 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_errors_8h_1a7c84f993e326519edca8fd9efdec746ea0c1be935ae4f22ab2131ac82f875a6df">HH_FREAD_ERROR</link>;
<anchor xml:id="_data__reader_8c_source_1l00111"/>00111 &#32;&#32;&#32;&#32;}
<anchor xml:id="_data__reader_8c_source_1l00112"/>00112 
<anchor xml:id="_data__reader_8c_source_1l00113"/>00113 &#32;&#32;*output&#32;=&#32;((uint16_t)bytes[1]&#32;&lt;&lt;&#32;8)&#32;|&#32;(uint16_t)bytes[0];
<anchor xml:id="_data__reader_8c_source_1l00114"/>00114 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
<anchor xml:id="_data__reader_8c_source_1l00115"/>00115 }
<anchor xml:id="_data__reader_8c_source_1l00116"/>00116 
<anchor xml:id="_data__reader_8c_source_1l00117"/>00117 int8_t
<anchor xml:id="_data__reader_8c_source_1l00118"/><link linkend="_data__reader_8c_1a095233f80d488c02ecbdd3aca2d38231">00118</link> <link linkend="_data__reader_8c_1a095233f80d488c02ecbdd3aca2d38231">read_string</link>&#32;(FILE&#32;*fptr,&#32;<emphasis role="keywordtype">char</emphasis>&#32;*output,&#32;uint8_t&#32;length)
<anchor xml:id="_data__reader_8c_source_1l00119"/>00119 {
<anchor xml:id="_data__reader_8c_source_1l00120"/>00120 &#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;bytes_read&#32;=&#32;fread&#32;(output,&#32;<emphasis role="keyword">sizeof</emphasis>&#32;(<emphasis role="keywordtype">char</emphasis>),&#32;length&#32;-&#32;1,&#32;fptr);
<anchor xml:id="_data__reader_8c_source_1l00121"/>00121 &#32;&#32;output[length&#32;-&#32;1]&#32;=&#32;<emphasis role="charliteral">&apos;\0&apos;</emphasis>;
<anchor xml:id="_data__reader_8c_source_1l00122"/>00122 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(bytes_read&#32;!=&#32;<emphasis role="keyword">sizeof</emphasis>&#32;(<emphasis role="keywordtype">char</emphasis>)&#32;*&#32;length&#32;-&#32;1)
<anchor xml:id="_data__reader_8c_source_1l00123"/>00123 &#32;&#32;&#32;&#32;{
<anchor xml:id="_data__reader_8c_source_1l00124"/>00124 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_errors_8c_1a2628891f509e5466f8a7c932a72bd2dc">handle_fread_error</link>&#32;(bytes_read,&#32;<emphasis role="keyword">sizeof</emphasis>&#32;(<emphasis role="keywordtype">char</emphasis>)&#32;*&#32;length&#32;-&#32;1);
<anchor xml:id="_data__reader_8c_source_1l00125"/>00125 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_errors_8h_1a7c84f993e326519edca8fd9efdec746ea0c1be935ae4f22ab2131ac82f875a6df">HH_FREAD_ERROR</link>;
<anchor xml:id="_data__reader_8c_source_1l00126"/>00126 &#32;&#32;&#32;&#32;}
<anchor xml:id="_data__reader_8c_source_1l00127"/>00127 
<anchor xml:id="_data__reader_8c_source_1l00128"/>00128 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
<anchor xml:id="_data__reader_8c_source_1l00129"/>00129 }
<anchor xml:id="_data__reader_8c_source_1l00130"/>00130 
<anchor xml:id="_data__reader_8c_source_1l00131"/>00131 int8_t
<anchor xml:id="_data__reader_8c_source_1l00132"/><link linkend="_data__reader_8c_1ac8a5617b9328c9f95fb8ce6cf446bdf0">00132</link> <link linkend="_data__reader_8c_1ac8a5617b9328c9f95fb8ce6cf446bdf0">read_array_uint8</link>&#32;(FILE&#32;*fptr,&#32;uint8_t&#32;*arr,&#32;uint8_t&#32;length)
<anchor xml:id="_data__reader_8c_source_1l00133"/>00133 {
<anchor xml:id="_data__reader_8c_source_1l00134"/>00134 &#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;bytes_read&#32;=&#32;fread&#32;(arr,&#32;<emphasis role="keyword">sizeof</emphasis>&#32;(uint8_t),&#32;length,&#32;fptr);
<anchor xml:id="_data__reader_8c_source_1l00135"/>00135 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(bytes_read&#32;!=&#32;<emphasis role="keyword">sizeof</emphasis>&#32;(uint8_t)&#32;*&#32;length)
<anchor xml:id="_data__reader_8c_source_1l00136"/>00136 &#32;&#32;&#32;&#32;{
<anchor xml:id="_data__reader_8c_source_1l00137"/>00137 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_errors_8c_1a2628891f509e5466f8a7c932a72bd2dc">handle_fread_error</link>&#32;(bytes_read,&#32;<emphasis role="keyword">sizeof</emphasis>&#32;(uint8_t)&#32;*&#32;length);
<anchor xml:id="_data__reader_8c_source_1l00138"/>00138 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_errors_8h_1a7c84f993e326519edca8fd9efdec746ea0c1be935ae4f22ab2131ac82f875a6df">HH_FREAD_ERROR</link>;
<anchor xml:id="_data__reader_8c_source_1l00139"/>00139 &#32;&#32;&#32;&#32;}
<anchor xml:id="_data__reader_8c_source_1l00140"/>00140 
<anchor xml:id="_data__reader_8c_source_1l00141"/>00141 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
<anchor xml:id="_data__reader_8c_source_1l00142"/>00142 }
<anchor xml:id="_data__reader_8c_source_1l00143"/>00143 
<anchor xml:id="_data__reader_8c_source_1l00144"/>00144 int8_t
<anchor xml:id="_data__reader_8c_source_1l00145"/><link linkend="_data__reader_8c_1a9fa8fe51a3363438da9a616c4363e837">00145</link> <link linkend="_data__reader_8c_1a9fa8fe51a3363438da9a616c4363e837">read_dec_datetime</link>&#32;(FILE&#32;*fptr,&#32;<link linkend="_structdec__datetime">dec_datetime</link>&#32;*dt)
<anchor xml:id="_data__reader_8c_source_1l00146"/>00146 {
<anchor xml:id="_data__reader_8c_source_1l00147"/>00147 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;((<link linkend="_data__reader_8c_1a095233f80d488c02ecbdd3aca2d38231">read_string</link>&#32;(fptr,&#32;dt-&gt;<link linkend="_structdec__datetime_1aecdc0bb36e008959ec02964a90f26185">year</link>,&#32;<link linkend="_datetime_8h_1ae1bf067b2ccb33abefdd15183cf9ab64">YEAR_FIELD_LEN</link>)&#32;!=&#32;0)
<anchor xml:id="_data__reader_8c_source_1l00148"/>00148 &#32;&#32;&#32;&#32;&#32;&#32;||&#32;(<link linkend="_data__reader_8c_1a095233f80d488c02ecbdd3aca2d38231">read_string</link>&#32;(fptr,&#32;dt-&gt;<link linkend="_structdec__datetime_1a9a49918f821ccde4fc3aa3c88cd2963c">month</link>,&#32;<link linkend="_datetime_8h_1acc006ed15ce1e12e4b219834d33ee662">MONTH_FIELD_LEN</link>)&#32;!=&#32;0)
<anchor xml:id="_data__reader_8c_source_1l00149"/>00149 &#32;&#32;&#32;&#32;&#32;&#32;||&#32;(<link linkend="_data__reader_8c_1a095233f80d488c02ecbdd3aca2d38231">read_string</link>&#32;(fptr,&#32;dt-&gt;<link linkend="_structdec__datetime_1af3fc3798050252f3dd1bacea9f5cf93f">day</link>,&#32;<link linkend="_datetime_8h_1a1ac2df2e34ef234de552a151d3b97bbb">DAY_FIELD_LEN</link>)&#32;!=&#32;0)
<anchor xml:id="_data__reader_8c_source_1l00150"/>00150 &#32;&#32;&#32;&#32;&#32;&#32;||&#32;(<link linkend="_data__reader_8c_1a095233f80d488c02ecbdd3aca2d38231">read_string</link>&#32;(fptr,&#32;dt-&gt;<link linkend="_structdec__datetime_1a186dc4e54850249d53afc571181ea4cd">hour</link>,&#32;<link linkend="_datetime_8h_1ad1a4da9ded2254332c4e1a94c2b187e9">HOUR_FIELD_LEN</link>)&#32;!=&#32;0)
<anchor xml:id="_data__reader_8c_source_1l00151"/>00151 &#32;&#32;&#32;&#32;&#32;&#32;||&#32;(<link linkend="_data__reader_8c_1a095233f80d488c02ecbdd3aca2d38231">read_string</link>&#32;(fptr,&#32;dt-&gt;<link linkend="_structdec__datetime_1ae9f8578fefb8937e837cfad07e21ca3c">minute</link>,&#32;<link linkend="_datetime_8h_1ac98f70a718b2a41a5da4b23dbfffb84a">MINUTE_FIELD_LEN</link>)&#32;!=&#32;0)
<anchor xml:id="_data__reader_8c_source_1l00152"/>00152 &#32;&#32;&#32;&#32;&#32;&#32;||&#32;(<link linkend="_data__reader_8c_1a095233f80d488c02ecbdd3aca2d38231">read_string</link>&#32;(fptr,&#32;dt-&gt;<link linkend="_structdec__datetime_1ad456741338a4fbfa1ce792c9458bdf49">second</link>,&#32;<link linkend="_datetime_8h_1abba1fa1a9450e11671e3f3793bef5861">SECOND_FIELD_LEN</link>)&#32;!=&#32;0)
<anchor xml:id="_data__reader_8c_source_1l00153"/>00153 &#32;&#32;&#32;&#32;&#32;&#32;||&#32;(<link linkend="_data__reader_8c_1a095233f80d488c02ecbdd3aca2d38231">read_string</link>&#32;(fptr,&#32;dt-&gt;<link linkend="_structdec__datetime_1a5d3eb33cf9dd5476ec640c559d86483e">hundredths_of_a_second</link>,
<anchor xml:id="_data__reader_8c_source_1l00154"/>00154 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_datetime_8h_1a718309da4d9ed9b2292e9461e98a7914">HUNDREDTHS_OF_A_SECOND_FIELD_LEN</link>)
<anchor xml:id="_data__reader_8c_source_1l00155"/>00155 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;!=&#32;0)
<anchor xml:id="_data__reader_8c_source_1l00156"/>00156 &#32;&#32;&#32;&#32;&#32;&#32;||&#32;(<link linkend="_data__reader_8c_1a3987a7d12b6ef51327e5d1ae63d087cc">read_single_uint8</link>&#32;(fptr,&#32;&amp;dt-&gt;<link linkend="_structdec__datetime_1a50b663ed16c5a54dab5fdfd8ef48a3d6">time_zone_offset</link>)&#32;!=&#32;0))
<anchor xml:id="_data__reader_8c_source_1l00157"/>00157 &#32;&#32;&#32;&#32;{
<anchor xml:id="_data__reader_8c_source_1l00158"/>00158 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_errors_8h_1a7c84f993e326519edca8fd9efdec746ea0c1be935ae4f22ab2131ac82f875a6df">HH_FREAD_ERROR</link>;
<anchor xml:id="_data__reader_8c_source_1l00159"/>00159 &#32;&#32;&#32;&#32;}
<anchor xml:id="_data__reader_8c_source_1l00160"/>00160 
<anchor xml:id="_data__reader_8c_source_1l00161"/>00161 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
<anchor xml:id="_data__reader_8c_source_1l00162"/>00162 }
<anchor xml:id="_data__reader_8c_source_1l00163"/>00163 
<anchor xml:id="_data__reader_8c_source_1l00164"/>00164 int8_t
<anchor xml:id="_data__reader_8c_source_1l00165"/><link linkend="_data__reader_8c_1a3987a7d12b6ef51327e5d1ae63d087cc">00165</link> <link linkend="_data__reader_8c_1a3987a7d12b6ef51327e5d1ae63d087cc">read_single_uint8</link>&#32;(FILE&#32;*fptr,&#32;uint8_t&#32;*value)
<anchor xml:id="_data__reader_8c_source_1l00166"/>00166 {
<anchor xml:id="_data__reader_8c_source_1l00167"/>00167 &#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;bytes_read&#32;=&#32;fread&#32;(value,&#32;<emphasis role="keyword">sizeof</emphasis>&#32;(uint8_t),&#32;1,&#32;fptr);
<anchor xml:id="_data__reader_8c_source_1l00168"/>00168 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(bytes_read&#32;!=&#32;<emphasis role="keyword">sizeof</emphasis>&#32;(uint8_t))
<anchor xml:id="_data__reader_8c_source_1l00169"/>00169 &#32;&#32;&#32;&#32;{
<anchor xml:id="_data__reader_8c_source_1l00170"/>00170 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_errors_8c_1a2628891f509e5466f8a7c932a72bd2dc">handle_fread_error</link>&#32;(bytes_read,&#32;<emphasis role="keyword">sizeof</emphasis>&#32;(uint8_t));
<anchor xml:id="_data__reader_8c_source_1l00171"/>00171 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_errors_8h_1a7c84f993e326519edca8fd9efdec746ea0c1be935ae4f22ab2131ac82f875a6df">HH_FREAD_ERROR</link>;
<anchor xml:id="_data__reader_8c_source_1l00172"/>00172 &#32;&#32;&#32;&#32;}
<anchor xml:id="_data__reader_8c_source_1l00173"/>00173 
<anchor xml:id="_data__reader_8c_source_1l00174"/>00174 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
<anchor xml:id="_data__reader_8c_source_1l00175"/>00175 }
<anchor xml:id="_data__reader_8c_source_1l00176"/>00176 
<anchor xml:id="_data__reader_8c_source_1l00177"/>00177 int8_t
<anchor xml:id="_data__reader_8c_source_1l00178"/><link linkend="_data__reader_8c_1a671723ae43b83cdf3db007816fc6b0a0">00178</link> <link linkend="_data__reader_8c_1a671723ae43b83cdf3db007816fc6b0a0">read_dir_datetime</link>&#32;(FILE&#32;*fptr,&#32;<link linkend="_structdir__datetime">dir_datetime</link>&#32;*dt)
<anchor xml:id="_data__reader_8c_source_1l00179"/>00179 {
<anchor xml:id="_data__reader_8c_source_1l00180"/>00180 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;((<link linkend="_data__reader_8c_1a3987a7d12b6ef51327e5d1ae63d087cc">read_single_uint8</link>&#32;(fptr,&#32;&amp;dt-&gt;<link linkend="_structdir__datetime_1aea1e1dd3a1027d5fe236a4dab033ef95">year</link>)&#32;!=&#32;0)
<anchor xml:id="_data__reader_8c_source_1l00181"/>00181 &#32;&#32;&#32;&#32;&#32;&#32;||&#32;(<link linkend="_data__reader_8c_1a3987a7d12b6ef51327e5d1ae63d087cc">read_single_uint8</link>&#32;(fptr,&#32;&amp;dt-&gt;<link linkend="_structdir__datetime_1a5481d120cb6827e5e732870f247fdd1f">month</link>)&#32;!=&#32;0)
<anchor xml:id="_data__reader_8c_source_1l00182"/>00182 &#32;&#32;&#32;&#32;&#32;&#32;||&#32;(<link linkend="_data__reader_8c_1a3987a7d12b6ef51327e5d1ae63d087cc">read_single_uint8</link>&#32;(fptr,&#32;&amp;dt-&gt;<link linkend="_structdir__datetime_1af54522a1af8ab65ee2952b64cbbfcd72">day</link>)&#32;!=&#32;0)
<anchor xml:id="_data__reader_8c_source_1l00183"/>00183 &#32;&#32;&#32;&#32;&#32;&#32;||&#32;(<link linkend="_data__reader_8c_1a3987a7d12b6ef51327e5d1ae63d087cc">read_single_uint8</link>&#32;(fptr,&#32;&amp;dt-&gt;<link linkend="_structdir__datetime_1a4c8fcd93cd358f7391eb1c76e0dc73c2">hour</link>)&#32;!=&#32;0)
<anchor xml:id="_data__reader_8c_source_1l00184"/>00184 &#32;&#32;&#32;&#32;&#32;&#32;||&#32;(<link linkend="_data__reader_8c_1a3987a7d12b6ef51327e5d1ae63d087cc">read_single_uint8</link>&#32;(fptr,&#32;&amp;dt-&gt;<link linkend="_structdir__datetime_1aa4546643c94281e49bb4a4e877e85c36">minute</link>)&#32;!=&#32;0)
<anchor xml:id="_data__reader_8c_source_1l00185"/>00185 &#32;&#32;&#32;&#32;&#32;&#32;||&#32;(<link linkend="_data__reader_8c_1a3987a7d12b6ef51327e5d1ae63d087cc">read_single_uint8</link>&#32;(fptr,&#32;&amp;dt-&gt;<link linkend="_structdir__datetime_1ab591f62d74ab9b0a116f69a3fc950162">second</link>)&#32;!=&#32;0)
<anchor xml:id="_data__reader_8c_source_1l00186"/>00186 &#32;&#32;&#32;&#32;&#32;&#32;||&#32;(<link linkend="_data__reader_8c_1a3987a7d12b6ef51327e5d1ae63d087cc">read_single_uint8</link>&#32;(fptr,&#32;&amp;dt-&gt;<link linkend="_structdir__datetime_1afd2ade26637ba3a84189bcb678130834">time_zone_offset</link>)&#32;!=&#32;0))
<anchor xml:id="_data__reader_8c_source_1l00187"/>00187 &#32;&#32;&#32;&#32;{
<anchor xml:id="_data__reader_8c_source_1l00188"/>00188 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_errors_8h_1a7c84f993e326519edca8fd9efdec746ea0c1be935ae4f22ab2131ac82f875a6df">HH_FREAD_ERROR</link>;
<anchor xml:id="_data__reader_8c_source_1l00189"/>00189 &#32;&#32;&#32;&#32;}
<anchor xml:id="_data__reader_8c_source_1l00190"/>00190 
<anchor xml:id="_data__reader_8c_source_1l00191"/>00191 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
<anchor xml:id="_data__reader_8c_source_1l00192"/>00192 }
<anchor xml:id="_data__reader_8c_source_1l00193"/>00193 
<anchor xml:id="_data__reader_8c_source_1l00194"/>00194 int8_t
<anchor xml:id="_data__reader_8c_source_1l00195"/><link linkend="_data__reader_8c_1a706cf4826080ce7bf4a1706fe10f379a">00195</link> <link linkend="_data__reader_8c_1a706cf4826080ce7bf4a1706fe10f379a">read_file_flags</link>&#32;(FILE&#32;*fptr,&#32;<link linkend="_structfile__flags">file_flags</link>&#32;*ff)
<anchor xml:id="_data__reader_8c_source_1l00196"/>00196 {
<anchor xml:id="_data__reader_8c_source_1l00197"/>00197 &#32;&#32;uint8_t&#32;byte;
<anchor xml:id="_data__reader_8c_source_1l00198"/>00198 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_data__reader_8c_1a3987a7d12b6ef51327e5d1ae63d087cc">read_single_uint8</link>&#32;(fptr,&#32;&amp;<emphasis role="keywordtype">byte</emphasis>)&#32;!=&#32;0)
<anchor xml:id="_data__reader_8c_source_1l00199"/>00199 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_errors_8h_1a7c84f993e326519edca8fd9efdec746ea0c1be935ae4f22ab2131ac82f875a6df">HH_FREAD_ERROR</link>;
<anchor xml:id="_data__reader_8c_source_1l00200"/>00200 
<anchor xml:id="_data__reader_8c_source_1l00201"/>00201 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keywordtype">byte</emphasis>&#32;&amp;&#32;0x1)
<anchor xml:id="_data__reader_8c_source_1l00202"/>00202 &#32;&#32;&#32;&#32;{
<anchor xml:id="_data__reader_8c_source_1l00203"/>00203 &#32;&#32;&#32;&#32;&#32;&#32;ff-&gt;<link linkend="_structfile__flags_1a4139d9b02dc7f9d1649ed9d3466dd7af">hidden</link>&#32;=&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="_data__reader_8c_source_1l00204"/>00204 &#32;&#32;&#32;&#32;}
<anchor xml:id="_data__reader_8c_source_1l00205"/>00205 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keywordtype">byte</emphasis>&#32;&amp;&#32;0x2)
<anchor xml:id="_data__reader_8c_source_1l00206"/>00206 &#32;&#32;&#32;&#32;{
<anchor xml:id="_data__reader_8c_source_1l00207"/>00207 &#32;&#32;&#32;&#32;&#32;&#32;ff-&gt;<link linkend="_structfile__flags_1a16bbb1c4299a88199b4bc23f29215049">subdirectory</link>&#32;=&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="_data__reader_8c_source_1l00208"/>00208 &#32;&#32;&#32;&#32;}
<anchor xml:id="_data__reader_8c_source_1l00209"/>00209 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keywordtype">byte</emphasis>&#32;&amp;&#32;0x4)
<anchor xml:id="_data__reader_8c_source_1l00210"/>00210 &#32;&#32;&#32;&#32;{
<anchor xml:id="_data__reader_8c_source_1l00211"/>00211 &#32;&#32;&#32;&#32;&#32;&#32;ff-&gt;<link linkend="_structfile__flags_1a65c772bf6516b11d65fb49180812c109">associated_file</link>&#32;=&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="_data__reader_8c_source_1l00212"/>00212 &#32;&#32;&#32;&#32;}
<anchor xml:id="_data__reader_8c_source_1l00213"/>00213 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keywordtype">byte</emphasis>&#32;&amp;&#32;0x8)
<anchor xml:id="_data__reader_8c_source_1l00214"/>00214 &#32;&#32;&#32;&#32;{
<anchor xml:id="_data__reader_8c_source_1l00215"/>00215 &#32;&#32;&#32;&#32;&#32;&#32;ff-&gt;<link linkend="_structfile__flags_1a86793fb0cad3076a0f21d6c4bb1f1059">extended_attribute_record_contains_owner_and_group_permissions</link>
<anchor xml:id="_data__reader_8c_source_1l00216"/>00216 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="_data__reader_8c_source_1l00217"/>00217 &#32;&#32;&#32;&#32;}
<anchor xml:id="_data__reader_8c_source_1l00218"/>00218 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keywordtype">byte</emphasis>&#32;&amp;&#32;0x10)
<anchor xml:id="_data__reader_8c_source_1l00219"/>00219 &#32;&#32;&#32;&#32;{
<anchor xml:id="_data__reader_8c_source_1l00220"/>00220 &#32;&#32;&#32;&#32;&#32;&#32;ff-&gt;<link linkend="_structfile__flags_1aef4a9f3598c6b75c602d7c7a969669a3">final_directory_record</link>&#32;=&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="_data__reader_8c_source_1l00221"/>00221 &#32;&#32;&#32;&#32;}
<anchor xml:id="_data__reader_8c_source_1l00222"/>00222 
<anchor xml:id="_data__reader_8c_source_1l00223"/>00223 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
<anchor xml:id="_data__reader_8c_source_1l00224"/>00224 }
</programlisting></section>
