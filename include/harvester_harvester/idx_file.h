/**
 *  harvester_harvester/idx_file.h - an interface for processing and extracting
 *  Harvester's index files. Intended for internal usage. All public functions
 *  are prefixed by `_hhidx`.
 *
 *  Index files simply contain filenames, sizes, and offsets to data stored in
 *  an accompanying .dat file. We use them here to extract data from those dat
 *  files.
 *
 *  NOTE: The datatype and functions contained herein were created using my own
 *  observations from studying these files and their associated .dat files in a
 *  hex editor. It's worth noting that there is some additional data (between
 *  the `path` and `extent_loc` data fields) included in these files that we're
 *  ignoring here; I can't for the life of me figure out what it's used for. It
 *  could be random garbage generated by whatever program created these files.
 *  They could be file flags or perhaps even some sort of checksum--I'm not
 *  sure. If you have any idea what this data might be used for, feel free to
 *  open an issue or pull request! Thanks!
 *
 *  See: `harvester_harvester/idx_file.c`
 *  See: `.github/extra_idx_data.md`
 *
 *  Copyright (C) 2024-2025  IcePanorama
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */
#ifndef _HARVESTER_HARVESTER_INDEX_FILE_H_
#define _HARVESTER_HARVESTER_INDEX_FILE_H_

typedef struct _HHIndexFile_s _HHIndexFile_t;

/**
 *  Allocates an _HHIndexFile_t. Said file must later be freed via
 *  `_hhidx_free`. Return value may be NULL upon calloc failure.
 *
 *  Return:  pointer to allocated index file
 *  See:  `_hhidx_free`
 */
_HHIndexFile_t *_hhidx_alloc (void);

/**
 *  Frees memory allocated by `i`. If `i` is NULL, this simply returns
 *  immediately.
 *
 *  Param:  i  some _HHIndexFile_t
 */
void _hhidx_free (_HHIndexFile_t *i);

/**
 *  Prints all the data fields of `i` to stdout. Returns immediately if `i` is
 *  NULL.
 *
 *  Param:  i  some _HHIndexFile_t
 */
void _hhidx_print (_HHIndexFile_t *i);

/**
 *  Initializes all the data fields of `i` using the data provided via the
 *  index file at location, `path`. Returns non-zero if `i` is NULL.
 *
 *  Param:  i     some _HHIndexFile_t
 *  Param:  path  a path to some index file data
 *  Return:  Zero on success, non-zero on failure.
 */
int _hhidx_init (_HHIndexFile_t *i, const char path[static 1],
                 const char output_dir[static 1]);

/**
 *  Uses `i` in order to extract the data provided contained within the .dat
 *  file located at `dat_path`. Returns non-zero if `i` is NULL.
 *
 *  Param:  i         some _HHIndexFile_t
 *  Param:  dat_path  path to some internal .dat file data
 *  Return:  Zero on success, non-zero on failure.
 */
int _hhidx_extract (_HHIndexFile_t *i, const char *dat_path);

#endif /* _HARVESTER_HARVESTER_INDEX_FILE_H_ */
